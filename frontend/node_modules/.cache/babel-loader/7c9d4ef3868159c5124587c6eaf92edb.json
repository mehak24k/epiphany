{"ast":null,"code":"var _jsxFileName = \"/Users/Mehak/Desktop/epiphany/frontend/src/Posts/Posts.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport Truncate from 'react-truncate';\nimport Badge from 'react-bootstrap/Badge';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { TextField } from '@material-ui/core/';\nimport { Autocomplete } from '@material-ui/lab/';\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.colors = [\"#ffbaba\", \"#ffddab\", \"#fdffcf\", \"#bdffb3\", \"#b8fff9\", \"#ffd1ea\", \"#edc4ff\"];\n    this.state = {\n      posts: null,\n      filteredPosts: null,\n      tags: null\n    };\n    this.filterPosts = this.filterPosts.bind(this);\n    this.filterTags = this.filterTags.bind(this);\n    this.deleteTag = this.deleteTag.bind(this);\n  }\n\n  async componentDidMount() {\n    const posts = (await axios.get('http://localhost:5000/')).data;\n    console.log(posts);\n    let arr = [];\n\n    for (var i in posts) {\n      arr.push(posts[i]);\n    }\n\n    this.setState({\n      // an array of arrays\n      posts: arr[0],\n      filteredPosts: arr[0]\n    });\n    console.log(this.state.posts);\n    console.log(this.state.filteredPosts);\n  }\n\n  filterPosts(event) {\n    this.setState({\n      filteredPosts: this.state.posts.filter(post => {\n        return post.title.toLowerCase().includes(event.target.value.toLowerCase()) || post.body.toLowerCase().includes(event.target.value.toLowerCase());\n      })\n    });\n  }\n\n  deleteTag(event) {\n    console.log(event.target.id);\n    let arr = [];\n\n    if (this.state.tags === null) {\n      arr = [];\n    } else {\n      arr = this.state.tags;\n    }\n\n    const index = arr.indexOf(event.target.id);\n    console.log(index);\n    arr.splice(index, 1);\n    this.setState({\n      tags: arr,\n      filteredPosts: this.state.posts.filter(post => {\n        var check = false;\n        let count = 0;\n        arr.forEach(myTag => {\n          post.tags.forEach(tag => {\n            if (tag.name.toLowerCase().includes(myTag.toLowerCase())) {\n              count = count + 1;\n            }\n          });\n        });\n\n        if (count === arr.length) {\n          check = true;\n        } else {\n          check = false;\n        }\n\n        return check;\n      })\n    });\n    console.log(arr);\n  }\n\n  filterTags(event) {\n    if (event.keyCode === 39) {\n      let arr = [];\n\n      if (this.state.tags === null) {\n        arr = [];\n      } else {\n        arr = this.state.tags;\n      }\n\n      arr.push(event.target.value.toLowerCase());\n      this.setState({\n        tags: arr,\n        filteredPosts: this.state.posts.filter(post => {\n          var check = false;\n          let count = 0;\n          arr.forEach(myTag => {\n            post.tags.forEach(tag => {\n              if (tag.name.toLowerCase().includes(myTag.toLowerCase())) {\n                count = count + 1;\n              }\n            });\n          });\n\n          if (count === arr.length) {\n            check = true;\n          } else {\n            check = false;\n          }\n\n          return check;\n        })\n      });\n    }\n\n    console.log(this.state.tags);\n  }\n\n  getColor() {\n    if (this.colors.length === 0) {\n      this.colors = [\"#ffbaba\", \"#ffddab\", \"#fdffcf\", \"#bdffb3\", \"#b8fff9\", \"#ffd1ea\", \"#edc4ff\"];\n    }\n\n    var len = this.colors.length;\n    var randomNum = Math.floor(Math.random() * len);\n    var color = this.colors[randomNum];\n    this.colors.splice(randomNum, 1);\n    return color;\n  }\n\n  render() {\n    const top100Films = [{\n      title: 'The Shawshank Redemption',\n      year: 1994\n    }, {\n      title: 'The Godfather',\n      year: 1972\n    }, {\n      title: 'The Godfather: Part II',\n      year: 1974\n    }, {\n      title: 'The Dark Knight',\n      year: 2008\n    }, {\n      title: '12 Angry Men',\n      year: 1957\n    }, {\n      title: \"Schindler's List\",\n      year: 1993\n    }, {\n      title: 'Pulp Fiction',\n      year: 1994\n    }, {\n      title: 'The Lord of the Rings: The Return of the King',\n      year: 2003\n    }, {\n      title: 'The Good, the Bad and the Ugly',\n      year: 1966\n    }, {\n      title: 'Fight Club',\n      year: 1999\n    }, {\n      title: 'The Lord of the Rings: The Fellowship of the Ring',\n      year: 2001\n    }, {\n      title: 'Star Wars: Episode V - The Empire Strikes Back',\n      year: 1980\n    }, {\n      title: 'Forrest Gump',\n      year: 1994\n    }, {\n      title: 'Inception',\n      year: 2010\n    }, {\n      title: 'The Lord of the Rings: The Two Towers',\n      year: 2002\n    }, {\n      title: \"One Flew Over the Cuckoo's Nest\",\n      year: 1975\n    }, {\n      title: 'Goodfellas',\n      year: 1990\n    }, {\n      title: 'The Matrix',\n      year: 1999\n    }, {\n      title: 'Seven Samurai',\n      year: 1954\n    }, {\n      title: 'Star Wars: Episode IV - A New Hope',\n      year: 1977\n    }, {\n      title: 'City of God',\n      year: 2002\n    }, {\n      title: 'Se7en',\n      year: 1995\n    }, {\n      title: 'The Silence of the Lambs',\n      year: 1991\n    }, {\n      title: \"It's a Wonderful Life\",\n      year: 1946\n    }, {\n      title: 'Life Is Beautiful',\n      year: 1997\n    }, {\n      title: 'The Usual Suspects',\n      year: 1995\n    }, {\n      title: 'Léon: The Professional',\n      year: 1994\n    }, {\n      title: 'Spirited Away',\n      year: 2001\n    }, {\n      title: 'Saving Private Ryan',\n      year: 1998\n    }, {\n      title: 'Once Upon a Time in the West',\n      year: 1968\n    }, {\n      title: 'American History X',\n      year: 1998\n    }, {\n      title: 'Interstellar',\n      year: 2014\n    }, {\n      title: 'Casablanca',\n      year: 1942\n    }, {\n      title: 'City Lights',\n      year: 1931\n    }, {\n      title: 'Psycho',\n      year: 1960\n    }, {\n      title: 'The Green Mile',\n      year: 1999\n    }, {\n      title: 'The Intouchables',\n      year: 2011\n    }, {\n      title: 'Modern Times',\n      year: 1936\n    }, {\n      title: 'Raiders of the Lost Ark',\n      year: 1981\n    }, {\n      title: 'Rear Window',\n      year: 1954\n    }, {\n      title: 'The Pianist',\n      year: 2002\n    }, {\n      title: 'The Departed',\n      year: 2006\n    }, {\n      title: 'Terminator 2: Judgment Day',\n      year: 1991\n    }, {\n      title: 'Back to the Future',\n      year: 1985\n    }, {\n      title: 'Whiplash',\n      year: 2014\n    }, {\n      title: 'Gladiator',\n      year: 2000\n    }, {\n      title: 'Memento',\n      year: 2000\n    }, {\n      title: 'The Prestige',\n      year: 2006\n    }, {\n      title: 'The Lion King',\n      year: 1994\n    }, {\n      title: 'Apocalypse Now',\n      year: 1979\n    }, {\n      title: 'Alien',\n      year: 1979\n    }, {\n      title: 'Sunset Boulevard',\n      year: 1950\n    }, {\n      title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\n      year: 1964\n    }, {\n      title: 'The Great Dictator',\n      year: 1940\n    }, {\n      title: 'Cinema Paradiso',\n      year: 1988\n    }, {\n      title: 'The Lives of Others',\n      year: 2006\n    }, {\n      title: 'Grave of the Fireflies',\n      year: 1988\n    }, {\n      title: 'Paths of Glory',\n      year: 1957\n    }, {\n      title: 'Django Unchained',\n      year: 2012\n    }, {\n      title: 'The Shining',\n      year: 1980\n    }, {\n      title: 'WALL·E',\n      year: 2008\n    }, {\n      title: 'American Beauty',\n      year: 1999\n    }, {\n      title: 'The Dark Knight Rises',\n      year: 2012\n    }, {\n      title: 'Princess Mononoke',\n      year: 1997\n    }, {\n      title: 'Aliens',\n      year: 1986\n    }, {\n      title: 'Oldboy',\n      year: 2003\n    }, {\n      title: 'Once Upon a Time in America',\n      year: 1984\n    }, {\n      title: 'Witness for the Prosecution',\n      year: 1957\n    }, {\n      title: 'Das Boot',\n      year: 1981\n    }, {\n      title: 'Citizen Kane',\n      year: 1941\n    }, {\n      title: 'North by Northwest',\n      year: 1959\n    }, {\n      title: 'Vertigo',\n      year: 1958\n    }, {\n      title: 'Star Wars: Episode VI - Return of the Jedi',\n      year: 1983\n    }, {\n      title: 'Reservoir Dogs',\n      year: 1992\n    }, {\n      title: 'Braveheart',\n      year: 1995\n    }, {\n      title: 'M',\n      year: 1931\n    }, {\n      title: 'Requiem for a Dream',\n      year: 2000\n    }, {\n      title: 'Amélie',\n      year: 2001\n    }, {\n      title: 'A Clockwork Orange',\n      year: 1971\n    }, {\n      title: 'Like Stars on Earth',\n      year: 2007\n    }, {\n      title: 'Taxi Driver',\n      year: 1976\n    }, {\n      title: 'Lawrence of Arabia',\n      year: 1962\n    }, {\n      title: 'Double Indemnity',\n      year: 1944\n    }, {\n      title: 'Eternal Sunshine of the Spotless Mind',\n      year: 2004\n    }, {\n      title: 'Amadeus',\n      year: 1984\n    }, {\n      title: 'To Kill a Mockingbird',\n      year: 1962\n    }, {\n      title: 'Toy Story 3',\n      year: 2010\n    }, {\n      title: 'Logan',\n      year: 2017\n    }, {\n      title: 'Full Metal Jacket',\n      year: 1987\n    }, {\n      title: 'Dangal',\n      year: 2016\n    }, {\n      title: 'The Sting',\n      year: 1973\n    }, {\n      title: '2001: A Space Odyssey',\n      year: 1968\n    }, {\n      title: \"Singin' in the Rain\",\n      year: 1952\n    }, {\n      title: 'Toy Story',\n      year: 1995\n    }, {\n      title: 'Bicycle Thieves',\n      year: 1948\n    }, {\n      title: 'The Kid',\n      year: 1921\n    }, {\n      title: 'Inglourious Basterds',\n      year: 2009\n    }, {\n      title: 'Snatch',\n      year: 2000\n    }, {\n      title: '3 Idiots',\n      year: 2009\n    }, {\n      title: 'Monty Python and the Holy Grail',\n      year: 1975\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formSearch\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      label: \"freeSolo\",\n      type: \"text\",\n      placeholder: \"Search posts!\",\n      onChange: this.filterPosts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 15\n      }\n    }, \"Here, you can search with text that matches the title or body of the posts.\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    }, this.state.tags && this.state.tags.map(tag => /*#__PURE__*/React.createElement(ButtonGroup, {\n      style: {\n        paddingLeft: 2,\n        paddingRight: 2,\n        paddingTop: 2,\n        paddingBottom: 5\n      },\n      \"aria-label\": \"Basic example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.deleteTag,\n      id: tag,\n      variant: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 15\n      }\n    }, \"x\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }, tag))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 1125,\n        paddingLeft: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      id: \"free-solo-demo\",\n      freeSolo: true,\n      options: top100Films.map(option => option.title),\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        id: \"standard-full-width\",\n        label: \"freeSolo\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formSearch2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"Search with tags!\",\n      onKeyUp: this.filterTags,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }\n    }, \"Here, you can search with tags.\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }\n    }, this.state.posts === null && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 41\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 47\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 96\n      }\n    }, \"Loading posts...\")), this.state.filteredPosts && this.state.filteredPosts.map(post => /*#__PURE__*/React.createElement(\"div\", {\n      key: post.id,\n      className: \"col-sm-12 col-md-4 col-lg-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: `/post/${post.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card mb-3\",\n      style: {\n        backgroundColor: this.getColor(),\n        color: \"#161717\",\n        height: '250px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }\n    }, post.title), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 21\n      }\n    }, post.tags && post.tags.map(tag => /*#__PURE__*/React.createElement(Col, {\n      style: {\n        paddingLeft: 2,\n        paddingRight: 2\n      },\n      md: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Badge, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 25\n      }\n    }, tag.name)))), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-text\",\n      style: {\n        maxLength: \"100\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Truncate, {\n      lines: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }\n    }, post.body)))))))));\n  }\n\n}\n\nexport default Posts;","map":{"version":3,"sources":["/Users/Mehak/Desktop/epiphany/frontend/src/Posts/Posts.js"],"names":["React","Component","Link","axios","Truncate","Badge","Row","Col","Spinner","Form","Button","ButtonGroup","TextField","Autocomplete","Posts","constructor","props","colors","state","posts","filteredPosts","tags","filterPosts","bind","filterTags","deleteTag","componentDidMount","get","data","console","log","arr","i","push","setState","event","filter","post","title","toLowerCase","includes","target","value","body","id","index","indexOf","splice","check","count","forEach","myTag","tag","name","length","keyCode","getColor","len","randomNum","Math","floor","random","color","render","top100Films","year","map","paddingLeft","paddingRight","paddingTop","paddingBottom","width","option","params","backgroundColor","height","maxLength"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport Truncate from 'react-truncate';\nimport Badge from 'react-bootstrap/Badge'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport {TextField} from '@material-ui/core/';\nimport {Autocomplete} from '@material-ui/lab/';\n\nclass Posts extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: null,\n      filteredPosts: null,\n      tags: null,\n    };\n    this.filterPosts = this.filterPosts.bind(this);\n    this.filterTags = this.filterTags.bind(this);\n    this.deleteTag = this.deleteTag.bind(this);\n  }\n\n  async componentDidMount() {\n      const posts = (await axios.get('http://localhost:5000/')).data;\n      console.log(posts);\n      let arr = [];\n      for (var i in posts) {\n        arr.push(posts[i])\n      }\n      this.setState({\n        // an array of arrays\n        posts: arr[0],\n        filteredPosts: arr[0],\n      });\n      console.log(this.state.posts);\n      console.log(this.state.filteredPosts);\n  }\n\n  filterPosts(event) {\n    this.setState({\n      filteredPosts: this.state.posts.filter(post => {\n        return post.title.toLowerCase().includes(event.target.value.toLowerCase())\n        || post.body.toLowerCase().includes(event.target.value.toLowerCase())\n      })\n    });\n  }\n\n  deleteTag(event) {\n    console.log(event.target.id)\n    let arr = [];\n    if (this.state.tags === null){\n      arr = [];\n    } else {\n      arr = this.state.tags;\n    }\n\n    const index = arr.indexOf(event.target.id)\n    console.log(index);\n    arr.splice(index, 1)\n    this.setState({\n      tags: arr,\n      filteredPosts: this.state.posts.filter(post => {\n        var check = false;\n        let count = 0;\n        arr.forEach(myTag => {\n          post.tags.forEach(tag => {\n            if (tag.name.toLowerCase().includes(myTag.toLowerCase())) {\n              count = count + 1;\n            }\n          })\n        });\n        if (count === arr.length) {\n          check = true;\n        } else {\n          check = false;\n        }\n        return check;\n      }),\n    })\n    console.log(arr);\n\n  }\n\n  filterTags(event) {\n    if (event.keyCode === 39) {\n      let arr = [];\n      if (this.state.tags === null){\n        arr = [];\n      } else {\n        arr = this.state.tags;\n      }\n      arr.push(event.target.value.toLowerCase())\n      this.setState({\n        tags: arr,\n        filteredPosts: this.state.posts.filter(post => {\n          var check = false;\n          let count = 0;\n          arr.forEach(myTag => {\n            post.tags.forEach(tag => {\n              if (tag.name.toLowerCase().includes(myTag.toLowerCase())) {\n                count = count + 1;\n              }\n            })\n          });\n          if (count === arr.length) {\n            check = true;\n          } else {\n            check = false;\n          }\n          return check;\n        }),\n\n      });\n    }\n    console.log(this.state.tags);\n  }\n\n  colors = [\"#ffbaba\",\"#ffddab\",\"#fdffcf\",\"#bdffb3\",\"#b8fff9\",\"#ffd1ea\",\"#edc4ff\"];\n  getColor(){\n    if (this.colors.length === 0) {\n      this.colors = [\"#ffbaba\",\"#ffddab\",\"#fdffcf\",\"#bdffb3\",\"#b8fff9\",\"#ffd1ea\",\"#edc4ff\"];\n    }\n    var len = this.colors.length;\n    var randomNum = Math.floor(Math.random()*len);\n    var color = this.colors[randomNum];\n    this.colors.splice(randomNum, 1);\n    return color;\n  }\n\n  render() {\n    const top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n  { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\n  { title: 'The Good, the Bad and the Ugly', year: 1966 },\n  { title: 'Fight Club', year: 1999 },\n  { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\n  { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\n  { title: 'Forrest Gump', year: 1994 },\n  { title: 'Inception', year: 2010 },\n  { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\n  { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\n  { title: 'Goodfellas', year: 1990 },\n  { title: 'The Matrix', year: 1999 },\n  { title: 'Seven Samurai', year: 1954 },\n  { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\n  { title: 'City of God', year: 2002 },\n  { title: 'Se7en', year: 1995 },\n  { title: 'The Silence of the Lambs', year: 1991 },\n  { title: \"It's a Wonderful Life\", year: 1946 },\n  { title: 'Life Is Beautiful', year: 1997 },\n  { title: 'The Usual Suspects', year: 1995 },\n  { title: 'Léon: The Professional', year: 1994 },\n  { title: 'Spirited Away', year: 2001 },\n  { title: 'Saving Private Ryan', year: 1998 },\n  { title: 'Once Upon a Time in the West', year: 1968 },\n  { title: 'American History X', year: 1998 },\n  { title: 'Interstellar', year: 2014 },\n  { title: 'Casablanca', year: 1942 },\n  { title: 'City Lights', year: 1931 },\n  { title: 'Psycho', year: 1960 },\n  { title: 'The Green Mile', year: 1999 },\n  { title: 'The Intouchables', year: 2011 },\n  { title: 'Modern Times', year: 1936 },\n  { title: 'Raiders of the Lost Ark', year: 1981 },\n  { title: 'Rear Window', year: 1954 },\n  { title: 'The Pianist', year: 2002 },\n  { title: 'The Departed', year: 2006 },\n  { title: 'Terminator 2: Judgment Day', year: 1991 },\n  { title: 'Back to the Future', year: 1985 },\n  { title: 'Whiplash', year: 2014 },\n  { title: 'Gladiator', year: 2000 },\n  { title: 'Memento', year: 2000 },\n  { title: 'The Prestige', year: 2006 },\n  { title: 'The Lion King', year: 1994 },\n  { title: 'Apocalypse Now', year: 1979 },\n  { title: 'Alien', year: 1979 },\n  { title: 'Sunset Boulevard', year: 1950 },\n  { title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb', year: 1964 },\n  { title: 'The Great Dictator', year: 1940 },\n  { title: 'Cinema Paradiso', year: 1988 },\n  { title: 'The Lives of Others', year: 2006 },\n  { title: 'Grave of the Fireflies', year: 1988 },\n  { title: 'Paths of Glory', year: 1957 },\n  { title: 'Django Unchained', year: 2012 },\n  { title: 'The Shining', year: 1980 },\n  { title: 'WALL·E', year: 2008 },\n  { title: 'American Beauty', year: 1999 },\n  { title: 'The Dark Knight Rises', year: 2012 },\n  { title: 'Princess Mononoke', year: 1997 },\n  { title: 'Aliens', year: 1986 },\n  { title: 'Oldboy', year: 2003 },\n  { title: 'Once Upon a Time in America', year: 1984 },\n  { title: 'Witness for the Prosecution', year: 1957 },\n  { title: 'Das Boot', year: 1981 },\n  { title: 'Citizen Kane', year: 1941 },\n  { title: 'North by Northwest', year: 1959 },\n  { title: 'Vertigo', year: 1958 },\n  { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\n  { title: 'Reservoir Dogs', year: 1992 },\n  { title: 'Braveheart', year: 1995 },\n  { title: 'M', year: 1931 },\n  { title: 'Requiem for a Dream', year: 2000 },\n  { title: 'Amélie', year: 2001 },\n  { title: 'A Clockwork Orange', year: 1971 },\n  { title: 'Like Stars on Earth', year: 2007 },\n  { title: 'Taxi Driver', year: 1976 },\n  { title: 'Lawrence of Arabia', year: 1962 },\n  { title: 'Double Indemnity', year: 1944 },\n  { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\n  { title: 'Amadeus', year: 1984 },\n  { title: 'To Kill a Mockingbird', year: 1962 },\n  { title: 'Toy Story 3', year: 2010 },\n  { title: 'Logan', year: 2017 },\n  { title: 'Full Metal Jacket', year: 1987 },\n  { title: 'Dangal', year: 2016 },\n  { title: 'The Sting', year: 1973 },\n  { title: '2001: A Space Odyssey', year: 1968 },\n  { title: \"Singin' in the Rain\", year: 1952 },\n  { title: 'Toy Story', year: 1995 },\n  { title: 'Bicycle Thieves', year: 1948 },\n  { title: 'The Kid', year: 1921 },\n  { title: 'Inglourious Basterds', year: 2009 },\n  { title: 'Snatch', year: 2000 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n        <Col>\n          <Form>\n            <Form.Group controlId=\"formSearch\">\n            <Form.Control label=\"freeSolo\" type=\"text\" placeholder=\"Search posts!\" onChange={this.filterPosts}/>\n              <Form.Text className=\"text-muted\">\n                Here, you can search with text that matches the title or body of the posts.\n              </Form.Text>\n            </Form.Group>\n          </Form>\n          </Col>\n        </div>\n        <div className=\"row\">\n          <Row>\n          {this.state.tags && this.state.tags.map(tag => (\n            <ButtonGroup style={{ paddingLeft: 2, paddingRight: 2, paddingTop: 2, paddingBottom: 5}} aria-label=\"Basic example\">\n              <Button onClick={this.deleteTag} id={tag} variant=\"secondary\">x</Button>\n              <Button variant=\"secondary\">{tag}</Button>\n            </ButtonGroup>\n            ))\n        }\n          </Row>\n        </div>\n        <div className=\"row\">\n        <div style={{ width: 1125, paddingLeft: 15 }}>\n        <Autocomplete\n          id=\"free-solo-demo\"\n          freeSolo\n          options={top100Films.map((option) => option.title)}\n          renderInput={(params) => (\n            <TextField {...params}  id=\"standard-full-width\" label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n          )}\n        />\n        </div>\n        </div>\n        <div className=\"row\">\n        <Col>\n          <Form>\n            <Form.Group controlId=\"formSearch2\">\n              <Form.Control type=\"text\" placeholder=\"Search with tags!\" onKeyUp={this.filterTags}/>\n              <Form.Text className=\"text-muted\">\n                Here, you can search with tags.\n              </Form.Text>\n            </Form.Group>\n          </Form>\n          </Col>\n        </div>\n        <div className=\"row\">\n          {this.state.posts === null && <div> <Spinner animation=\"border\" variant=\"primary\" /> <p>Loading posts...</p></div>}\n          {this.state.filteredPosts && this.state.filteredPosts.map(post => (\n              <div key={post.id} className=\"col-sm-12 col-md-4 col-lg-3\">\n                <Link to={`/post/${post.id}`}>\n                  <div className=\"card mb-3\" style={{backgroundColor: this.getColor(), color: \"#161717\", height: '250px'}}>\n                  <div className=\"card-body\">\n                    <h4 className=\"card-title\">{post.title}</h4>\n                    <Row>\n                    {post.tags && post.tags.map(tag => (\n                      <Col style={{ paddingLeft: 2, paddingRight: 2 }} md=\"auto\">\n                        <Badge variant=\"info\">{tag.name}</Badge>\n                      </Col>\n                      ))\n                    }\n                    </Row>\n                    <p className=\"card-text\" style={{maxLength: \"100\"}}>\n                    <Truncate lines={2}>\n                        {post.body}\n                    </Truncate>\n                    </p>\n                  </div>\n                  </div>\n                </Link>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}