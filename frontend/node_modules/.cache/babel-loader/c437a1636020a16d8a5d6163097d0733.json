{"ast":null,"code":"var _jsxFileName = \"/Users/Mehak/Desktop/epiphany/frontend/src/Posts/Posts.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport Truncate from 'react-truncate';\nimport Badge from 'react-bootstrap/Badge';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { TextField } from '@material-ui/core/';\nimport { Autocomplete } from '@material-ui/lab/';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\n\nclass Posts extends Component {\n  constructor(props) {\n    super(props);\n    this.colors = [\"#ffbaba\", \"#ffddab\", \"#fdffcf\", \"#bdffb3\", \"#b8fff9\", \"#ffd1ea\", \"#edc4ff\"];\n    this.state = {\n      posts: null,\n      filteredPosts: null,\n      tags: null,\n      tagsList: null,\n      key: 0\n    };\n    this.filterPosts = this.filterPosts.bind(this);\n    this.filterTags = this.filterTags.bind(this);\n    this.deleteTag = this.deleteTag.bind(this);\n  }\n\n  async componentDidMount() {\n    const data = (await axios.get('http://localhost:5000/')).data;\n    console.log(data.data[0]);\n    const posts = data.data[0];\n    const tags = data.data[1];\n    console.log(posts);\n    let arr = [];\n\n    for (var i in posts) {\n      arr.push(posts[i]);\n    }\n\n    console.log(arr);\n    let tagArr = [];\n\n    for (var j in tags) {\n      tagArr.push(tags[j]);\n    }\n\n    this.setState({\n      posts: arr,\n      filteredPosts: arr,\n      tagsList: tagArr\n    });\n    console.log(this.state.posts);\n    console.log(this.state.filteredPosts);\n    console.log(this.state.tagsList);\n  }\n\n  filterPosts(event) {\n    this.setState({\n      filteredPosts: this.state.posts.filter(post => {\n        return post.title.toLowerCase().includes(event.target.value.toLowerCase()) || post.body.toLowerCase().includes(event.target.value.toLowerCase());\n      })\n    });\n  }\n\n  deleteTag(event) {\n    console.log(event.target.id);\n    let arr = [];\n\n    if (this.state.tags === null) {\n      arr = [];\n    } else {\n      arr = this.state.tags;\n    }\n\n    const index = arr.indexOf(event.target.id);\n    console.log(index);\n    arr.splice(index, 1);\n    this.setState({\n      tags: arr,\n      filteredPosts: this.state.posts.filter(post => {\n        var check = false;\n        let count = 0;\n        arr.forEach(myTag => {\n          post.tags.forEach(tag => {\n            if (tag.name.toLowerCase().includes(myTag.toLowerCase())) {\n              count = count + 1;\n            }\n          });\n        });\n\n        if (count === arr.length) {\n          check = true;\n        } else {\n          check = false;\n        }\n\n        return check;\n      })\n    });\n    console.log(arr);\n  }\n\n  filterTags(event) {\n    if (event.keyCode === 39) {\n      let arr = [];\n\n      if (this.state.tags === null) {\n        arr = [];\n      } else {\n        arr = this.state.tags;\n      }\n\n      arr.push(event.target.value);\n      this.setState({\n        tags: arr,\n        filteredPosts: this.state.posts.filter(post => {\n          var check = false;\n          let count = 0;\n          arr.forEach(myTag => {\n            post.tags.forEach(tag => {\n              if (tag.name.toLowerCase().includes(myTag.toLowerCase())) {\n                count = count + 1;\n              }\n            });\n          });\n\n          if (count === arr.length) {\n            check = true;\n          } else {\n            check = false;\n          }\n\n          return check;\n        })\n      });\n    }\n\n    console.log(this.state.tags);\n  }\n\n  getColor() {\n    if (this.colors.length === 0) {\n      this.colors = [\"#ffbaba\", \"#ffddab\", \"#fdffcf\", \"#bdffb3\", \"#b8fff9\", \"#ffd1ea\", \"#edc4ff\"];\n    }\n\n    var len = this.colors.length;\n    var randomNum = Math.floor(Math.random() * len);\n    var color = this.colors[randomNum];\n    this.colors.splice(randomNum, 1);\n    return color;\n  }\n\n  getKey() {\n    this.setState({\n      key: this.state.key + 1\n    });\n    return this.state.key;\n  }\n\n  render() {\n    const top100Films = this.state.tagsList;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formSearch\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      label: \"freeSolo\",\n      type: \"text\",\n      placeholder: \"Search posts!\",\n      onChange: this.filterPosts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 15\n      }\n    }, \"Here, you can search with text that matches the title or body of the posts.\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        paddingLeft: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, this.state.tags && this.state.tags.map(tag => /*#__PURE__*/React.createElement(ButtonGroup, {\n      style: {\n        paddingLeft: 2,\n        paddingRight: 2,\n        paddingTop: 2,\n        paddingBottom: 5\n      },\n      \"aria-label\": \"Basic example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.deleteTag,\n      id: tag,\n      variant: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }\n    }, \"x\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }\n    }, tag))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, this.state.tagsList && /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 1125,\n        paddingLeft: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      id: \"free-solo-demo\",\n      freeSolo: true,\n      options: top100Films.map(option => option.name),\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        id: \"standard-full-width\",\n        label: \"Search with tags!\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onKeyUp: this.filterTags,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }))), this.state.posts === null && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 39\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Spinner, {\n      animation: \"border\",\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 45\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 94\n      }\n    }, \"Loading posts...\")), this.state.filteredPosts && this.state.filteredPosts.map(post => /*#__PURE__*/React.createElement(Link, {\n      to: `/post/${post.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      key: post.id,\n      className: \"text-center\",\n      style: {\n        backgroundColor: this.getColor(),\n        marginTop: 10,\n        marginBottom: 10,\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      style: {\n        color: \"#161717\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 19\n      }\n    }, post.title), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 19\n      }\n    }, post.tags && post.tags.map(tag => /*#__PURE__*/React.createElement(Col, {\n      style: {\n        paddingLeft: 2,\n        paddingRight: 2,\n        alignItems: \"center\"\n      },\n      md: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Badge, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 23\n      }\n    }, tag.name)))), /*#__PURE__*/React.createElement(Card.Text, {\n      style: {\n        color: \"#161717\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Truncate, {\n      lines: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }, post.body))), /*#__PURE__*/React.createElement(Card.Footer, {\n      className: \"text-muted\",\n      style: {\n        color: \"#161717\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, \"Posted by \", post.user, \" at \", post.time)))));\n  }\n\n}\n\nexport default Posts;","map":{"version":3,"sources":["/Users/Mehak/Desktop/epiphany/frontend/src/Posts/Posts.js"],"names":["React","Component","Link","axios","Truncate","Badge","Row","Col","Spinner","Form","Button","ButtonGroup","TextField","Autocomplete","Card","CardDeck","Posts","constructor","props","colors","state","posts","filteredPosts","tags","tagsList","key","filterPosts","bind","filterTags","deleteTag","componentDidMount","data","get","console","log","arr","i","push","tagArr","j","setState","event","filter","post","title","toLowerCase","includes","target","value","body","id","index","indexOf","splice","check","count","forEach","myTag","tag","name","length","keyCode","getColor","len","randomNum","Math","floor","random","color","getKey","render","top100Films","paddingLeft","map","paddingRight","paddingTop","paddingBottom","width","option","params","backgroundColor","marginTop","marginBottom","alignItems","user","time"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\nimport Truncate from 'react-truncate';\nimport Badge from 'react-bootstrap/Badge'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport {TextField} from '@material-ui/core/';\nimport {Autocomplete} from '@material-ui/lab/';\nimport Card from 'react-bootstrap/Card'\nimport CardDeck from 'react-bootstrap/CardDeck'\n\nclass Posts extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: null,\n      filteredPosts: null,\n      tags: null,\n      tagsList: null,\n      key: 0,\n    };\n    this.filterPosts = this.filterPosts.bind(this);\n    this.filterTags = this.filterTags.bind(this);\n    this.deleteTag = this.deleteTag.bind(this);\n  }\n\n  async componentDidMount() {\n      const data = (await axios.get('http://localhost:5000/')).data;\n      console.log(data.data[0]);\n      const posts = data.data[0];\n      const tags = data.data[1];\n      console.log(posts);\n      let arr = [];\n      for (var i in posts) {\n        arr.push(posts[i])\n      }\n      console.log(arr);\n      let tagArr = [];\n      for (var j in tags) {\n        tagArr.push(tags[j])\n      }\n      this.setState({\n        posts: arr,\n        filteredPosts: arr,\n        tagsList: tagArr,\n      });\n      console.log(this.state.posts);\n      console.log(this.state.filteredPosts);\n      console.log(this.state.tagsList);\n  }\n\n  filterPosts(event) {\n    this.setState({\n      filteredPosts: this.state.posts.filter(post => {\n        return post.title.toLowerCase().includes(event.target.value.toLowerCase())\n        || post.body.toLowerCase().includes(event.target.value.toLowerCase())\n      })\n    });\n  }\n\n  deleteTag(event) {\n    console.log(event.target.id)\n    let arr = [];\n    if (this.state.tags === null){\n      arr = [];\n    } else {\n      arr = this.state.tags;\n    }\n\n    const index = arr.indexOf(event.target.id)\n    console.log(index);\n    arr.splice(index, 1)\n    this.setState({\n      tags: arr,\n      filteredPosts: this.state.posts.filter(post => {\n        var check = false;\n        let count = 0;\n        arr.forEach(myTag => {\n          post.tags.forEach(tag => {\n            if (tag.name.toLowerCase().includes(myTag.toLowerCase())) {\n              count = count + 1;\n            }\n          })\n        });\n        if (count === arr.length) {\n          check = true;\n        } else {\n          check = false;\n        }\n        return check;\n      }),\n    })\n    console.log(arr);\n\n  }\n\n  filterTags(event) {\n    if (event.keyCode === 39) {\n      let arr = [];\n      if (this.state.tags === null){\n        arr = [];\n      } else {\n        arr = this.state.tags;\n      }\n      arr.push(event.target.value)\n      this.setState({\n        tags: arr,\n        filteredPosts: this.state.posts.filter(post => {\n          var check = false;\n          let count = 0;\n          arr.forEach(myTag => {\n            post.tags.forEach(tag => {\n              if (tag.name.toLowerCase().includes(myTag.toLowerCase())) {\n                count = count + 1;\n              }\n            })\n          });\n          if (count === arr.length) {\n            check = true;\n          } else {\n            check = false;\n          }\n          return check;\n        }),\n\n      });\n    }\n    console.log(this.state.tags);\n  }\n\n  colors = [\"#ffbaba\",\"#ffddab\",\"#fdffcf\",\"#bdffb3\",\"#b8fff9\",\"#ffd1ea\",\"#edc4ff\"];\n  getColor(){\n    if (this.colors.length === 0) {\n      this.colors = [\"#ffbaba\",\"#ffddab\",\"#fdffcf\",\"#bdffb3\",\"#b8fff9\",\"#ffd1ea\",\"#edc4ff\"];\n    }\n    var len = this.colors.length;\n    var randomNum = Math.floor(Math.random()*len);\n    var color = this.colors[randomNum];\n    this.colors.splice(randomNum, 1);\n    return color;\n  }\n\n  getKey() {\n    this.setState({\n      key: this.state.key + 1,\n    })\n    return this.state.key;\n  }\n\n  render() {\n    const top100Films = this.state.tagsList;\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n        <Col>\n          <Form>\n            <Form.Group controlId=\"formSearch\">\n            <Form.Control label=\"freeSolo\" type=\"text\" placeholder=\"Search posts!\" onChange={this.filterPosts}/>\n              <Form.Text className=\"text-muted\">\n                Here, you can search with text that matches the title or body of the posts.\n              </Form.Text>\n            </Form.Group>\n          </Form>\n          </Col>\n        </div>\n        <div className=\"row\">\n          <Row style={{paddingLeft: 25}}>\n          {this.state.tags && this.state.tags.map(tag => (\n            <ButtonGroup style={{ paddingLeft: 2, paddingRight: 2, paddingTop: 2, paddingBottom: 5}} aria-label=\"Basic example\">\n              <Button onClick={this.deleteTag} id={tag} variant=\"secondary\">x</Button>\n              <Button variant=\"secondary\">{tag}</Button>\n            </ButtonGroup>\n            ))\n        }\n          </Row>\n        </div>\n        <div className=\"row\">\n        {this.state.tagsList && <div style={{ width: 1125, paddingLeft: 15 }}>\n        <Autocomplete\n          id=\"free-solo-demo\"\n          freeSolo\n          options={top100Films.map((option) => option.name)}\n          renderInput={(params) => (\n            <TextField {...params}  id=\"standard-full-width\" label=\"Search with tags!\" margin=\"normal\" variant=\"outlined\" onKeyUp={this.filterTags}/>\n          )}\n        />\n        </div>\n      }\n        </div>\n\n        {this.state.posts === null && <div> <Spinner animation=\"border\" variant=\"primary\" /> <p>Loading posts...</p></div>}\n        {this.state.filteredPosts && this.state.filteredPosts.map(post => (\n          <Link to={`/post/${post.id}`}>\n          <Card key={post.id} className=\"text-center\" style={{backgroundColor: this.getColor(), marginTop: 10, marginBottom: 10, alignItems: \"center\"}}>\n\n                <Card.Body>\n                  <Card.Title style={{color: \"#161717\"}}>{post.title}</Card.Title>\n                  <Row style={{alignItems: \"center\"}}>\n                  {post.tags && post.tags.map(tag => (\n                    <Col style={{ paddingLeft: 2, paddingRight: 2, alignItems: \"center\" }} md=\"auto\">\n                      <Badge variant=\"info\">{tag.name}</Badge>\n                    </Col>\n                    ))\n                  }\n                  </Row>\n                  <Card.Text style={{color: \"#161717\"}}>\n                  <Truncate lines={2}>\n                      {post.body}\n                  </Truncate>\n                  </Card.Text>\n                </Card.Body>\n                <Card.Footer className=\"text-muted\" style={{color: \"#161717\"}}>\n                Posted by {post.user} at {post.time}\n                </Card.Footer>\n            </Card>\n            </Link>\n          ))\n        }\n        </div>\n\n    )\n  }\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}